// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Performance-related settings
model PerformanceMetric {
  id          String   @id @default(uuid()) @map("_id")
  userId      String
  metricName  String
  metricValue Float
  timestamp   DateTime @default(now())
  metadata    Json?    @default("{}")
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([metricName])
  @@index([timestamp])
  @@index([userId, metricName])
  @@index([userId, timestamp])
}

// User model for authentication and profile information
model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  lastName           String
  email              String    @unique
  password           String
  phoneNumber        String?
  isPhoneVerified    Boolean   @default(false)
  isEmailVerified    Boolean   @default(false)
  role               String    @default("user") // user, admin, manager
  lastLogin          DateTime?
  failedLoginAttempts Int      @default(0)
  isLocked           Boolean   @default(false)
  lockedUntil        DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  refreshToken       String?
  refreshTokenExpires DateTime?
  otpSecret          String?
  otpEnabled         Boolean   @default(false)
  verificationToken  String?
  verificationExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  sessions           Session[]
  otpTokens          OTPToken[]
  metrics            PerformanceMetric[]
  teams              TeamMember[]
  tasks              Task[]
  goals              Goal[]
  habits             Habit[]
  accounts           Account[]
  transactions       Transaction[]
  budgets            Budget[]
  focusSessions      FocusSession[]
  analyticsReports   AnalyticsReport[]
  calendarEvents     CalendarEvent[]
  
  @@index([role])
  @@index([isEmailVerified])
}

// Session model for managing user sessions
model Session {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  token      String    @unique
  deviceInfo String?
  ipAddress  String?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// OTP Token model for one-time passwords and verification codes
model OTPToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  token      String
  type       String    // email_verification, password_reset, login
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  createdAt  DateTime  @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  members     TeamMember[]
  tasks       Task[]       @relation("TeamTasks")
  goals       Goal[]       @relation("TeamGoals")
  
  @@index([name])
}

model TeamMember {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  teamId    String
  role      String   @default("member")
  joinedAt  DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@index([role])
}

// Cache-related model for storing system-wide cache keys
model CacheRegistry {
  id          String   @id @default(uuid()) @map("_id")  
  cacheKey    String   @unique
  entity      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?
  
  @@index([entity])
  @@index([expiresAt])
}

// TASK MANAGEMENT

model Task {
  id                String      @id @default(uuid()) @map("_id")
  title             String
  description       String?
  status            String      // todo, in_progress, completed, archived
  priority          String      // low, medium, high, urgent
  userId            String
  teamId            String?
  dueDate           DateTime?
  estimatedHours    Float?
  actualHours       Float?
  completedAt       DateTime?
  startDate         DateTime?
  recurringType     String?     // none, daily, weekly, monthly
  recurringInterval Int?        // 1 = every day/week/month, 2 = every 2 days/weeks/months, etc.
  parentTaskId      String?
  tags              String[]
  metadata          Json?       @default("{}")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  team              Team?       @relation("TeamTasks", fields: [teamId], references: [id])
  parentTask        Task?       @relation("TaskHierarchy", fields: [parentTaskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subtasks          Task[]      @relation("TaskHierarchy")
  timeEntries       TimeEntry[]
  goal              Goal?       @relation(fields: [goalId], references: [id])
  goalId            String?

  @@index([userId])
  @@index([teamId])
  @@index([status])
  @@index([dueDate])
  @@index([priority])
  @@index([parentTaskId])
}

model TimeEntry {
  id          String    @id @default(uuid()) @map("_id")
  taskId      String
  userId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // Duration in seconds
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  focusSession FocusSession? @relation(fields: [focusSessionId], references: [id])
  focusSessionId String?

  @@index([taskId])
  @@index([userId])
  @@index([startTime])
}

// GOAL TRACKING

model Goal {
  id           String       @id @default(uuid()) @map("_id")
  title        String
  description  String?
  userId       String
  teamId       String?
  category     String       // personal, work, health, financial, etc.
  targetValue  Float?
  currentValue Float        @default(0)
  startDate    DateTime     @default(now())
  endDate      DateTime?
  status       String       @default("active") // active, completed, abandoned
  completedAt  DateTime?
  parentGoalId String?
  isPublic     Boolean      @default(false)
  metadata     Json?        @default("{}")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  team         Team?        @relation("TeamGoals", fields: [teamId], references: [id])
  parentGoal   Goal?        @relation("GoalHierarchy", fields: [parentGoalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subgoals     Goal[]       @relation("GoalHierarchy")
  milestones   Milestone[]
  tasks        Task[]

  @@index([userId])
  @@index([teamId])
  @@index([status])
  @@index([category])
  @@index([endDate])
}

model Milestone {
  id          String    @id @default(uuid()) @map("_id")
  goalId      String
  title       String
  description String?
  targetValue Float?
  isCompleted Boolean   @default(false)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  goal        Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
  @@index([dueDate])
}

// HABIT TRACKING

model Habit {
  id               String        @id @default(uuid()) @map("_id")
  userId           String
  name             String
  description      String?
  frequency        String        // daily, weekdays, weekly, custom
  frequencyData    Json?         // For custom frequencies (e.g., [1,3,5] for Monday, Wednesday, Friday)
  timeOfDay        String?       // morning, afternoon, evening, any
  targetStreak     Int?
  currentStreak    Int           @default(0)
  bestStreak       Int           @default(0)
  isActive         Boolean       @default(true)
  startDate        DateTime      @default(now())
  completionRate   Float         @default(0)
  category         String?       // health, productivity, learning, etc.
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions      HabitCompletion[]

  @@index([userId])
  @@index([frequency])
  @@index([isActive])
}

model HabitCompletion {
  id          String    @id @default(uuid()) @map("_id")
  habitId     String
  date        DateTime
  completed   Boolean   @default(true)
  note        String?
  createdAt   DateTime  @default(now())

  // Relations
  habit       Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date]) // A habit can only be completed once per day
  @@index([habitId])
  @@index([date])
}

// FINANCIAL TRACKING

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

model Account {
  id               String        @id @default(uuid()) @map("_id")
  userId           String
  name             String
  accountType      String        // checking, savings, credit, investment, cash
  balance          Float         @default(0)
  currency         String        @default("USD")
  isActive         Boolean       @default(true)
  includeInTotal   Boolean       @default(true)
  institution      String?
  accountNumber    String?       // Last 4 digits or masked account number
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     Transaction[] @relation("AccountTransactions")
  transfersFrom    Transaction[] @relation("TransferFrom")
  transfersTo      Transaction[] @relation("TransferTo")

  @@index([userId])
  @@index([accountType])
  @@index([isActive])
}

model Transaction {
  id               String          @id @default(uuid()) @map("_id")
  userId           String
  accountId        String
  amount           Float
  description      String
  date             DateTime
  type             TransactionType
  category         String?
  subcategory      String?
  isRecurring      Boolean         @default(false)
  recurrenceRule   String?         // RRULE format for recurring transactions
  transferToId     String?         // For transfer transactions
  transferFromId   String?         // For transfer transactions
  status           String          @default("cleared") // pending, cleared, reconciled
  tags             String[]
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  account          Account         @relation("AccountTransactions", fields: [accountId], references: [id], onDelete: Cascade)
  transferTo       Account?        @relation("TransferTo", fields: [transferToId], references: [id])
  transferFrom     Account?        @relation("TransferFrom", fields: [transferFromId], references: [id])
  budgetAllocation BudgetAllocation[]

  @@index([userId])
  @@index([accountId])
  @@index([date])
  @@index([type])
  @@index([category])
  @@index([isRecurring])
}

model Budget {
  id               String           @id @default(uuid()) @map("_id")
  userId           String
  name             String
  amount           Float
  period           String           // monthly, yearly, custom
  startDate        DateTime
  endDate          DateTime?
  isRecurring      Boolean          @default(true)
  categories       String[]         // Categories this budget applies to
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocations      BudgetAllocation[]

  @@index([userId])
  @@index([period])
  @@index([startDate])
  @@index([endDate])
}

model BudgetAllocation {
  id            String      @id @default(uuid()) @map("_id")
  budgetId      String
  transactionId String
  amount        Float
  createdAt     DateTime    @default(now())

  // Relations
  budget        Budget      @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([budgetId])
  @@index([transactionId])
}

// PRODUCTIVITY TRACKING

model FocusSession {
  id           String      @id @default(uuid()) @map("_id")
  userId       String
  startTime    DateTime
  endTime      DateTime?
  duration     Int?        // Duration in seconds
  category     String?     // work, study, creative, etc.
  mood         Int?        // 1-5 rating
  productivity Int?        // 1-5 rating
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries  TimeEntry[]

  @@index([userId])
  @@index([startTime])
  @@index([category])
}

// ANALYTICS & REPORTING

model AnalyticsReport {
  id           String    @id @default(uuid()) @map("_id")
  userId       String
  reportType   String    // daily, weekly, monthly, custom, productivity, financial
  startDate    DateTime
  endDate      DateTime
  data         Json
  createdAt    DateTime  @default(now())
  isAutoGenerated Boolean @default(true)

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([reportType])
  @@index([startDate])
  @@index([endDate])
}

// CALENDAR INTEGRATION

model CalendarEvent {
  id            String    @id @default(uuid()) @map("_id")
  userId        String
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  isAllDay      Boolean   @default(false)
  location      String?
  url           String?
  color         String?
  isRecurring   Boolean   @default(false)
  recurrenceRule String?  // RRULE format
  externalId    String?   // ID from external calendar (Google, Outlook, etc.)
  calendarId    String?   // External calendar ID
  reminderTime  Int?      // Minutes before event to remind
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startTime])
  @@index([endTime])
  @@index([isRecurring])
  @@index([externalId])
}
